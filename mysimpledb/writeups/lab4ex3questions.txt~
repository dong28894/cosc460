Questions
---------

Answer these questions.  With each question is a hint as to which part of the code walk you might consult to find the answer.

(Walk thru 1) How many instances of the TableStats class are created?

		The number of instances of the TableStats class created is equal to the number of tables in the database.

(Walk thru 4) In class, we said a logical plan is a relational algebra tree.  That's not how it's represented in SimpleDB.  How is it represented?

		In SimpleDB, the nodes in the conceptual relational algebra tree are stored in vectors. There are 3 types of vector to store 3 			different types of node in the tree, one vector is for LogicalScanNode, one is for LogicalFilterNode, and one is for LogicalJoinNode.

(Walk thru 5) The physicalPlan is a relational algebra tree.  Describe the basic shape of this tree in terms of which ops go where.
	
		All of the scan operations are at the lowest level of the tree. The next level is for filter operations. The join operations are at 			a higher level than the filter operations, and they have left-deep order. The root of the tree is projection operation. 

(Walk thru 5) Suppose a query applies multiple filters to a single table.  For example, the query described in the lab write up filters on both actor first and last name.  In such cases, how is the selectivity estimated? 
	
		Selectivity of the first filter will be calculated by using method estimateSelectivities of TableStats object. Then selectivity of 			the table will be updated in filterSelectivities. The selectivity of the next filter operation is also calculated by 			estimateSelectivities method. At this point, the selectivity of the table is computed by multiplying selectivity of the second 			filter operation with the updated value in filterSelectivities. After that we can update filterSelectivities again and continue in 			the same manner if there are more filter operations.  

(Walk thru 5) Explain the meaning of this if statement.  Why should the subplanMap have size 0 or 1 at this point?

    if (subplanMap.size() > 1) {
        throw new ParsingException("Query does not include join expressions joining all nodes!");
    }

		Because everytime we join 2 nodes, we substitute these 2 nodes in subplanMap with just 1 node representing the result of the join. 			Therefore, after joining all nodes, there should be no more than 1 node left in subplanMap. If there are more than 1 node, we didn't 			join all nodes in the query.

(Walk thru 7) What does computeCostAndCardOfSubplan do when the joinSet contains only a single join, the joinToRemove?

		In this case, computeCostAndCardOfSubplan just calculates the cost and cardinality of that single join.

(Walk thru 9) Suppose we are considering a join between a table A and the result of a join between B and C.  Assume table A is the outer relation in the join.  What is the cost estimate?  Your expression should be in terms of the sizes (# pages, # tuples) of the base relations A, B, C.

		Suppose m is the number of pages in the result of a join between B and C, n is the number of pages in A, and p is the number of 		tuples in A. Because we used nested loop join and A is the outer relation, the cost estimate is n + m*p. 

(Walk thru 10) In lab 3, you write Join and Filter operators.  Both of these support the DbIterator interface.  When/where are these iterators called?

		Filter iterator are called in physicalPlan method to carry out the filter operations on the base tables after they are scanned. 		physicalPlan method then calls JoinOptimizer.instantiateJoin() 

