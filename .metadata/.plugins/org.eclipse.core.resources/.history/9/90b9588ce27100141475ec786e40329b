package simpledb;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;

/**
 * BufferPool manages the reading and writing of pages into memory from
 * disk. Access methods call into it to retrieve pages, and it fetches
 * pages from the appropriate location.
 * <p/>
 * The BufferPool is also responsible for locking;  when a transaction fetches
 * a page, BufferPool checks that the transaction has the appropriate
 * locks to read/write the page.
 *
 * @Threadsafe, all fields are final
 */
public class BufferPool {
	public class LockManager{
		public class Request{
			TransactionId tid;
			Permissions perm;
			public Request(TransactionId tid, Permissions perm){
				this.tid = tid;
				this.perm = perm;
			}
			public TransactionId getTid(){
				return tid;
			}
			public Permissions getPerm(){
				return perm;
			}
			public void setTid(TransactionId tid){
				this.tid = tid;
			}
			public void setPerm(Permissions perm){
				this.perm = perm;
			}
		}
		LinkedList<Request> requests;
		LinkedList<Request> lockHolders;
		boolean isReadLock;
		public LockManager(){
			requests = new LinkedList<Request>();
			lockHolders = new LinkedList<Request>();
			isReadLock = false;
		}
		public TransactionId getLastHolder(){
			if (!lockHolders.isEmpty()){
				return lockHolders.getLast().getTid();
			}else{
				return null;
			}
		}
		public void addRequest(TransactionId tid, Permissions perm){			
			Request currReq = new Request(tid, perm);
			boolean isDuplicate = false;
			for (Request req: lockHolders){
				if (req.getTid() == tid){
					isDuplicate = true;
					break;
				}
			}
			if (isDuplicate && perm == Permissions.READ_WRITE){
				requests.add(0, currReq);
			}
			requests.add(currReq);			
		}
		public void remove(TransactionId tid){
			for (Request req: requests){
				if (req.getTid() == tid){
					requests.remove(req);
				}
			}
			for (Request req: lockHolders){
				if (req.getTid() == tid){
					lockHolders.remove(req);
				}
			}
		}
		public void updateLock(){
			if (lockHolders.isEmpty()){
				if (!requests.isEmpty()){
					if (requests.peek().getPerm() == Permissions.READ_WRITE){
						lockHolders.add(requests.peek());
						isReadLock = false;
					}else{
						for (Request req:requests){
							if (req.getPerm() == Permissions.READ_ONLY){
								lockHolders.add(req);
							}else{
								break;
							}
						}
						isReadLock = true;
					}
				}
			}else{
				if (isReadLock){
					for (Request req:requests){
						if (req.getPerm() == Permissions.READ_ONLY){
							lockHolders.add(req);
						}else{
							break;
						}
					}
				}
			}			
		}
		public boolean holdsLock(TransactionId tid){
			for (Request req: lockHolders){
				if (req.getTid() == tid){
					return true;
				}
			}
			return false;
		}
		public void printRequests(){
			System.out.println("Requests:");
			for (Request req: requests){
				System.out.println(req.getTid().getId() + " " + req.getPerm());
			}
		}
		public void printHolders(){
			System.out.println("Holders:");
			for (Request req: lockHolders){
				System.out.println(req.getTid().getId() + " " + req.getPerm());
			}
		}
	}
	public class PrecedenceGraph{
		HashMap<TransactionId, LinkedList<TransactionId>> graph;
		public PrecedenceGraph(){
			graph = new HashMap<TransactionId, LinkedList<TransactionId>>();
		}
		public void addVertex(TransactionId tid){
			if (!graph.containsKey(tid)){
				graph.put(tid, new LinkedList<TransactionId>());
			}
		}
		public void addEdge(TransactionId from, TransactionId to){
			LinkedList<TransactionId> adj = graph.get(from);
			adj.add(to);
			graph.put(from, adj);
		}
		public void remove(TransactionId tid){
			graph.remove(tid);
		}
		public boolean contains(TransactionId tid){
			return graph.containsKey(tid);
		}
		public boolean hasCycle(){
			HashSet<TransactionId> visited = new HashSet<TransactionId>();
			HashMap<TransactionId, Boolean> stack = new HashMap<TransactionId, Boolean>();
			for (TransactionId tid: graph.keySet()){
				if (cycleUtil(tid, visited, stack)){
					return true;
				}
			}
			return false;
		}
		public boolean cycleUtil(TransactionId tid, HashSet<TransactionId> visited, HashMap<TransactionId, Boolean> stack){
			if (!visited.contains(tid)){
				visited.add(tid);
				stack.put(tid, new Boolean(true));
				for (TransactionId adj: graph.get(tid)){
					if (!visited.contains(adj) && cycleUtil(adj, visited, stack)){
						return true;
					}else if (stack.get(adj).booleanValue() == true){
						return true;
					}
				}
			}
			stack.put(tid, new Boolean(false));
			return false;
		}
	}
	HashMap<PageId, LockManager> lockTable;
	HashMap<TransactionId, LinkedList<PageId>> transTable;
	PrecedenceGraph graph;
    /**
     * Bytes per page, including header.
     */
    public static final int PAGE_SIZE = 4096;

    private static int pageSize = PAGE_SIZE;

    /**
     * Default number of pages passed to the constructor. This is used by
     * other classes. BufferPool should use the numPages argument to the
     * constructor instead.
     */
    public static final int DEFAULT_PAGES = 50;
    private HashMap<PageId, Page> pool;
    private HashMap<PageId, Long> accessTime;
    int numPages;

    /**
     * Creates a BufferPool that caches up to numPages pages.
     *
     * @param numPages maximum number of pages in this buffer pool.
     */
    public BufferPool(int numPages) {
        // some code goes here
    	pool = new HashMap<PageId, Page>();
    	accessTime = new HashMap<PageId, Long>();
    	this.numPages = numPages;
    	lockTable = new HashMap<PageId, LockManager>();
    	transTable = new HashMap<TransactionId, LinkedList<PageId>>();
    	graph = new PrecedenceGraph();
    }

    public static int getPageSize() {
        return pageSize;
    }

    // THIS FUNCTION SHOULD ONLY BE USED FOR TESTING!!
    public static void setPageSize(int pageSize) {
        BufferPool.pageSize = pageSize;
    }

    /**
     * Retrieve the specified page with the associated permissions.
     * Will acquire a lock and may block if that lock is held by another
     * transaction.
     * <p/>
     * The retrieved page should be looked up in the buffer pool.  If it
     * is present, it should be returned.  If it is not present, it should
     * be added to the buffer pool and returned.  If there is insufficient
     * space in the buffer pool, an page should be evicted and the new page
     * should be added in its place.
     *
     * @param tid  the ID of the transaction requesting the page
     * @param pid  the ID of the requested page
     * @param perm the requested permissions on the page
     */
    public Page getPage(TransactionId tid, PageId pid, Permissions perm)
            throws TransactionAbortedException, DbException {
        // some code goes here
    	Page currentPage;
    	synchronized (this){
    		currentPage = (Page) pool.get(pid);
    		if (currentPage == null){
    			if (pool.size() == numPages){
    				evictPage();
    			}
    			int tableId = pid.getTableId();
    			Catalog currentCatalog = Database.getCatalog();
    			DbFile file = currentCatalog.getDatabaseFile(tableId);
    			currentPage = file.readPage(pid);
    			pool.put(pid, currentPage);
    		}
    	}
        LockManager currLock;
        LinkedList<PageId> pages;
        synchronized(this){
        	currLock = lockTable.get(pid);
        	pages = transTable.get(tid);
        	if (currLock == null){
        		currLock = new LockManager();
        		lockTable.put(pid, currLock);
        	}
        	if (pages == null){
        		pages = new LinkedList<PageId>();
        		transTable.put(tid, pages);
        	}
        	graph.addVertex(tid);
        	if (!holdsLock(tid, pid)){
        		TransactionId adj = currLock.getLastHolder();
        		if (adj != null){
        			graph.addEdge(tid, currLock.getLastHolder());
        		}
        		if (graph.hasCycle()){
        			throw new TransactionAbortedException();
        		}
        	}
        }
        synchronized (currLock){
        	currLock.addRequest(tid, perm);
        	currLock.updateLock();
        	pages.add(pid);
        	transTable.put(tid, pages);
        	while (!currLock.holdsLock(tid)){
        		try {
        			synchronized(this){
        				wait();
        			}
        		} catch (InterruptedException e) {
        			// TODO Auto-generated catch block
        			e.printStackTrace();
        		}
        	}        	
        }
        accessTime.put(pid, System.currentTimeMillis());
        return currentPage;        
    }

    /**
     * Releases the lock on a page.
     * Calling this is very risky, and may result in wrong behavior. Think hard
     * about who needs to call this and why, and why they can run the risk of
     * calling it.
     *
     * @param tid the ID of the transaction requesting the unlock
     * @param pid the ID of the page to unlock
     */
    public void releasePage(TransactionId tid, PageId pid) {
        // some code goes here
        // not necessary for lab1|lab2|lab3|lab4                                                         // cosc460
    	LockManager currLock = lockTable.get(pid);
    	currLock.remove(tid);
    	currLock.updateLock();
    	currLock.printRequests();
    	currLock.printHolders();
    	synchronized(this){
    		notifyAll();
    	}
    }

    /**
     * Release all locks associated with a given transaction.
     *
     * @param tid the ID of the transaction requesting the unlock
     */
    public void transactionComplete(TransactionId tid) throws IOException {
        // some code goes here
        // not necessary for lab1|lab2|lab3|lab4                                                         // cosc460
    	transactionComplete(tid, true);
    }

    /**
     * Return true if the specified transaction has a lock on the specified page
     */
    public boolean holdsLock(TransactionId tid, PageId p) {
        // some code goes here
        // not necessary for lab1|lab2|lab3|lab4                                                         // cosc460
    	LockManager currLock = lockTable.get(p);
    	synchronized(currLock){
    		if (currLock == null){
    			return false;
    		}
        	return currLock.holdsLock(tid);
        }
    }

    /**
     * Commit or abort a given transaction; release all locks associated to
     * the transaction.
     *
     * @param tid    the ID of the transaction requesting the unlock
     * @param commit a flag indicating whether we should commit or abort
     */
    public void transactionComplete(TransactionId tid, boolean commit)
            throws IOException {
        // some code goes here
        // not necessary for lab1|lab2|lab3|lab4                                                         // cosc460
    	LinkedList<PageId> pages = transTable.get(tid);
    	for (PageId page: pages){
    		releasePage(tid, page);
    		if (commit){
    			flushPage(page);
    		}else{
    			pool.remove(page);
    			int tableId = page.getTableId();
    			Catalog currentCatalog = Database.getCatalog();
    			DbFile file = currentCatalog.getDatabaseFile(tableId);
    			pool.put(page, file.readPage(page));
    		}
    	}    	
    	transTable.remove(tid);
    	graph.remove(tid);
    }

    /**
     * Add a tuple to the specified table on behalf of transaction tid.  Will
     * acquire a write lock on the page the tuple is added to and any other
     * pages that are updated (Lock acquisition is not needed until lab5).                                  // cosc460
     * May block if the lock(s) cannot be acquired.
     * <p/>
     * Marks any pages that were dirtied by the operation as dirty by calling
     * their markDirty bit, and updates cached versions of any pages that have
     * been dirtied so that future requests see up-to-date pages.
     *
     * @param tid     the transaction adding the tuple
     * @param tableId the table to add the tuple to
     * @param t       the tuple to add
     */
    public void insertTuple(TransactionId tid, int tableId, Tuple t)
            throws DbException, IOException, TransactionAbortedException {
        // some code goes here
        // not necessary for lab1
    	DbFile currFile = Database.getCatalog().getDatabaseFile(tableId);
    	ArrayList<Page> modPgs = currFile.insertTuple(tid, t);
    	for (Page pg: modPgs){
    		pg.markDirty(true, tid);
    	}
    }

    /**
     * Remove the specified tuple from the buffer pool.
     * Will acquire a write lock on the page the tuple is removed from and any
     * other pages that are updated. May block if the lock(s) cannot be acquired.
     * <p/>
     * Marks any pages that were dirtied by the operation as dirty by calling
     * their markDirty bit, and updates cached versions of any pages that have
     * been dirtied so that future requests see up-to-date pages.
     *
     * @param tid the transaction deleting the tuple.
     * @param t   the tuple to delete
     */
    public void deleteTuple(TransactionId tid, Tuple t)
            throws DbException, IOException, TransactionAbortedException {
        // some code goes here
        // not necessary for lab1
    	DbFile currFile = Database.getCatalog().getDatabaseFile(t.getRecordId().getPageId().getTableId());
    	ArrayList<Page> modPgs = currFile.deleteTuple(tid, t);
    	for (Page pg: modPgs){
    		pg.markDirty(true, tid);
    	}
    }

    /**
     * Flush all dirty pages to disk.
     * NB: Be careful using this routine -- it writes dirty data to disk so will
     * break simpledb if running in NO STEAL mode.
     */
    public synchronized void flushAllPages() throws IOException {
        // some code goes here
        // not necessary for lab1
    	for (PageId pid : pool.keySet()){	
    		flushPage(pid);    		
    	}
    }

    /**
     * Remove the specific page id from the buffer pool.
     * Needed by the recovery manager to ensure that the
     * buffer pool doesn't keep a rolled back page in its
     * cache.
     */
    public synchronized void discardPage(PageId pid) {
        // some code goes here
        // only necessary for lab6                                                                            // cosc460
    }

    /**
     * Flushes a certain page to disk
     *
     * @param pid an ID indicating the page to flush
     */
    private synchronized void flushPage(PageId pid) throws IOException {
        // some code goes here
        // not necessary for lab1
    	Page pg = pool.get(pid);
    	if (pg.isDirty() != null){
    	    int tableId = pid.getTableId();
    	    Catalog currentCatalog = Database.getCatalog();
    	    DbFile file = currentCatalog.getDatabaseFile(tableId);    	
    	    file.writePage(pg);
    	    pg.markDirty(false, pg.isDirty()); 
    	}
    }

    /**
     * Write all pages of the specified transaction to disk.
     */
    public synchronized void flushPages(TransactionId tid) throws IOException {
        // some code goes here
        // not necessary for lab1|lab2|lab3|lab4                                                         // cosc460
    	LinkedList<PageId> pages = transTable.get(tid);
    	for (PageId page: pages){
    		flushPage(page);
    	}
    }

    /**
     * Discards a page from the buffer pool.
     * Flushes the page to disk to ensure dirty pages are updated on disk.
     */
    private synchronized void evictPage() throws DbException {
        // some code goes here
        // not necessary for lab1
    	PageId oldestPage = null;
    	Long oldestTime = null;
    	for (PageId currPage : accessTime.keySet()){
    		if (pool.get(currPage).isDirty() == null){
    			if ((oldestTime == null) || (accessTime.get(currPage) < oldestTime)){
    				oldestPage = currPage;
    				oldestTime = accessTime.get(currPage);
    			}
    		}
    	}
    	if (oldestPage == null){
    		throw new DbException("All pages are dirty");
    	}
    	pool.remove(oldestPage);
    	accessTime.remove(oldestPage);
    }

}
