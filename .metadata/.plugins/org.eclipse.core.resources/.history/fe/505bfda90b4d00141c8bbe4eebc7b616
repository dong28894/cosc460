package simpledb;

import java.util.HashMap;

/**
 * Knows how to compute some aggregate over a set of IntFields.
 */
public class IntegerAggregator implements Aggregator {

    private static final long serialVersionUID = 1L;
    int gbfield;
    Type gbfieldtype;
    int afield;
    Op what;
    HashMap<Object, Integer[]> groups;

    /**
     * Aggregate constructor
     *
     * @param gbfield     the 0-based index of the group-by field in the tuple, or
     *                    NO_GROUPING if there is no grouping
     * @param gbfieldtype the type of the group by field (e.g., Type.INT_TYPE), or null
     *                    if there is no grouping
     * @param afield      the 0-based index of the aggregate field in the tuple
     * @param what        the aggregation operator
     */

    public IntegerAggregator(int gbfield, Type gbfieldtype, int afield, Op what) {
        // some code goes here
    	this.gbfield = gbfield;
    	this.gbfieldtype = gbfieldtype;
    	this.afield = afield;
    	this.what = what;
    	groups = new HashMap<Object, Integer[]>();
    	if (gbfield == Aggregator.NO_GROUPING){
    		 groups.put(what.toString(), new Integer[2]);
    	}
    }

    /**
     * Merge a new tuple into the aggregate, grouping as indicated in the
     * constructor
     *
     * @param tup the Tuple containing an aggregate field and a group-by field
     */
    public void mergeTupleIntoGroup(Tuple tup) {
        // some code goes here
    	if (gbfield == Aggregator.NO_GROUPING){
    		Integer[] update = new Integer[2];
			Integer[] old = groups.get(what.toString());
			int newVal = ((IntField)tup.getField(afield)).getValue();
			if (old[0] == null){
				update[0] = new Integer(newVal);
				if (what == Aggregator.Op.AVG){
					update[1] = new Integer(1);
				}
			}
    		if (what == Aggregator.Op.AVG){
    			update[0] = new Integer(old[0].intValue() + );
    			update[1] = new Integer(old[1].intValue() + 1);
    			groups.put(what.toString(), update);    			
    		}else{
    			
    		}
    	}else{
    		
    	}
    }

    /**
     * Create a DbIterator over group aggregate results.
     *
     * @return a DbIterator whose tuples are the pair (groupVal, aggregateVal)
     * if using group, or a single (aggregateVal) if no grouping. The
     * aggregateVal is determined by the type of aggregate specified in
     * the constructor.
     */
    public DbIterator iterator() {
        // some code goes here
        throw new
        UnsupportedOperationException("please implement me for lab3");                                     // cosc460
    }

}
