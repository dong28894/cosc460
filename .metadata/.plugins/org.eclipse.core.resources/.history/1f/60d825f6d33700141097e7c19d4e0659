package simpledb;

import java.io.*;
import java.util.*;

/**
 * HeapFile is an implementation of a DbFile that stores a collection of tuples
 * in no particular order. Tuples are stored on pages, each of which is a fixed
 * size, and the file is simply a collection of those pages. HeapFile works
 * closely with HeapPage. The format of HeapPages is described in the HeapPage
 * constructor.
 *
 * @author Sam Madden
 * @see simpledb.HeapPage#HeapPage
 */
public class HeapFile implements DbFile {
	class HeapFileIterator implements DbFileIterator{
		private int pageIndex;
		boolean open;
		TransactionId tid;
		HeapPage currPage;
		Iterator<Tuple> currPageIter;
		public HeapFileIterator(TransactionId tid){			
			this.tid = tid;
			pageIndex = 0;
			open = false;
			try {
				currPage = (HeapPage) Database.getBufferPool().getPage(tid, new HeapPageId(getId(), pageIndex), Permissions.READ_ONLY);
			} catch (TransactionAbortedException | DbException e) {
				e.printStackTrace();
			}
		}
		public void open(){
			open = true;
		}
		public void close(){
			open = false;
		}
		public boolean hasNext(){
			if (pageIndex < numPages()){
				return true;
			}
			return false;
		}
		public Tuple next(){
			if (currPageIter.hasNext()){
				return currPageIter.next();
			}else{
				pageIndex++;
				open();
				return currPageIter.next();
			}
		}
		public void rewind(){
			pageIndex = 0;
			open();
		}
	}
	File f;
	TupleDesc td;

    /**
     * Constructs a heap file backed by the specified file.
     *
     * @param f the file that stores the on-disk backing store for this heap
     *          file.
     */
    public HeapFile(File f, TupleDesc td) {
        // some code goes here
    	this.f = f;
    	this.td = td;
    }

    /**
     * Returns the File backing this HeapFile on disk.
     *
     * @return the File backing this HeapFile on disk.
     */
    public File getFile() {
        // some code goes here
        return f;
    }

    /**
     * Returns an ID uniquely identifying this HeapFile. Implementation note:
     * you will need to generate this tableid somewhere ensure that each
     * HeapFile has a "unique id," and that you always return the same value for
     * a particular HeapFile. We suggest hashing the absolute file name of the
     * file underlying the heapfile, i.e. f.getAbsoluteFile().hashCode().
     *
     * @return an ID uniquely identifying this HeapFile.
     */
    public int getId() {
        // some code goes here
        return f.getAbsoluteFile().hashCode();
    }

    /**
     * Returns the TupleDesc of the table stored in this DbFile.
     *
     * @return TupleDesc of this DbFile.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return td;
    }

    // see DbFile.java for javadocs
    public Page readPage(PageId pid) {
        // some code goes here
    	byte[] pageData = new byte[BufferPool.getPageSize()];
    	HeapPage returnedPage;
    	InputStream data;
		try {
			data = new BufferedInputStream(new FileInputStream(f));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			return null;
		}    	
        try {
			data.skip((pid.pageNumber()-1)*BufferPool.getPageSize());
	        data.read(pageData);
	        returnedPage = new HeapPage((HeapPageId) pid, pageData);
	        data.close();
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
        return returnedPage;
    }

    // see DbFile.java for javadocs
    public void writePage(Page page) throws IOException {
        // some code goes here
        // not necessary for lab1
    }

    /**
     * Returns the number of pages in this HeapFile.
     */
    public int numPages() {
        // some code goes here
        return (int) Math.floor(f.getAbsoluteFile().length()/BufferPool.getPageSize());
    }

    // see DbFile.java for javadocs
    public ArrayList<Page> insertTuple(TransactionId tid, Tuple t)
            throws DbException, IOException, TransactionAbortedException {
        // some code goes here
        return null;
        // not necessary for lab1
    }

    // see DbFile.java for javadocs
    public ArrayList<Page> deleteTuple(TransactionId tid, Tuple t) throws DbException,
            TransactionAbortedException {
        // some code goes here
        return null;
        // not necessary for lab1
    }

    // see DbFile.java for javadocs
    public DbFileIterator iterator(TransactionId tid) {
        // some code goes here
        return new HeapFileIterator(tid);
    }

}

