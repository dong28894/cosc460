package simpledb;

import simpledb.Predicate.Op;

/**
 * A class to represent a fixed-width histogram over a single integer-based field.
 */
public class IntHistogram {
	int min;
	int max;
	int width;
	int ntups;
	int buckets;
	int[] bucketMap;
    /**
     * Create a new IntHistogram.
     * <p/>
     * This IntHistogram should maintain a histogram of integer values that it receives.
     * It should split the histogram into "buckets" buckets.
     * <p/>
     * The values that are being histogrammed will be provided one-at-a-time through the "addValue()" function.
     * <p/>
     * Your implementation should use space and have execution time that are both
     * constant with respect to the number of values being histogrammed.  For example, you shouldn't
     * simply store every value that you see in a sorted list.
     *
     * @param buckets The number of buckets to split the input value into.
     * @param min     The minimum integer value that will ever be passed to this class for histogramming
     * @param max     The maximum integer value that will ever be passed to this class for histogramming
     */
    public IntHistogram(int buckets, int min, int max) {
        // some code goes here
    	this.min = min;
    	this.max = max;
    	if (buckets > (max - min)){
    		this.buckets = max - min;
    	}else{
    		this.buckets = buckets;
    	}
    	ntups = 0;
    	width = (int) Math.ceil((max-min)/buckets);
    	bucketMap = new int[buckets];
    }

    /**
     * Add a value to the set of values that you are keeping a histogram of.
     *
     * @param v Value to add to the histogram
     */
    public void addValue(int v) {
        // some code goes here
    	if (v > max || v < min){
    		throw new RuntimeException();
    	}else if (v == max){
    		bucketMap[buckets-1]++;
    		ntups++;
    	}else{
    		int bucketIndex = (int) Math.floor(((double)(v-min))/width);
    		bucketMap[bucketIndex]++;
    		ntups++;
    	}
    }

    /**
     * Estimate the selectivity of a particular predicate and operand on this table.
     * <p/>
     * For example, if "op" is "GREATER_THAN" and "v" is 5,
     * return your estimate of the fraction of elements that are greater than 5.
     *
     * @param op Operator
     * @param v  Value
     * @return Predicted selectivity of this particular operator and value
     */
    public double estimateSelectivity(Predicate.Op op, int v) {
    	int bucketIndex;
    	if (v == max){
    		bucketIndex = buckets - 1;
    	}else if (v < max && v >= min){    		
    		bucketIndex = (int) Math.floor(((double)(v-min))/width);
    	}
    	
        if (op == Predicate.Op.EQUALS || op == Predicate.Op.LIKE){
        	if (v > max || v < min){
        		return 0;
        	}else{
        		return (((double)bucketMap[bucketIndex])/width)/ntups;
        	}
        }else if (op == Predicate.Op.GREATER_THAN || op == Predicate.Op.GREATER_THAN_OR_EQ){
        	if (v > max){
        		return 0.0;
        	}else if (v < min){
        		return 1.0;
        	}
        	int total;
        	if (bucketNo < buckets){
        		int bucketRight = min + width*(bucketNo);
        		if (op == Predicate.Op.GREATER_THAN_OR_EQ){
        			total = (bucketRight - v)/bucketMap[bucketNo-1];
        		}else{
        			total = (bucketRight - v - 1)/bucketMap[bucketNo-1];
        		}
        	}else{
        		int bucketRight = max;
        		if (op == Predicate.Op.GREATER_THAN_OR_EQ){
        			total = (bucketRight - v + 1)/bucketMap[bucketNo-1];
        		}else{
        			total = (bucketRight - v)/bucketMap[bucketNo-1];
        		}
        	}
        	for (int i = bucketNo; i < buckets; i++){
        		total += bucketMap[i];
        	}
        	return ((double)total)/ntups;
        }else if (op == Predicate.Op.LESS_THAN || op == Predicate.Op.LESS_THAN_OR_EQ){
        	int bucketLeft = min + width*(bucketNo-1);
        	int total;
        	if (op == Predicate.Op.LESS_THAN){
        		total = (v-bucketLeft)/bucketMap[bucketNo-1]; 
        	}else{
        		total = (v-bucketLeft+1)/bucketMap[bucketNo-1];
        	}
        	for (int i = bucketNo-2; i >= buckets; i--){
        		total += bucketMap[i];
        	}
        	return ((double)total)/ntups;
        }else{
        	if (bucketNo < buckets){
        		return ((double)(ntups-bucketMap[bucketNo-1]/width))/ntups;
        	}else{
        		int lastWidth = max-min-(buckets-1)*width;
        		return ((double)(ntups-bucketMap[bucketNo-1]/lastWidth))/ntups;
        	}
        }
    }

    /**
     * @return A string describing this histogram, for debugging purposes
     */
    public String toString() {
        // some code goes here
        return null;
    }
}
